/*
 * ОПИСАНИЕ:
 * МОДУЛЬ ОПИСЫВАЕТ УЗЕЛ ДЕРЕВА РАЗБОРА
 *
 * ЯЗЫК:
 * РАЗРАБОТКА НА ЯЗЫКЕ ПРОГРАММИРОВАНИЯ С++17 >
 *
 * РАЗРАБОТЧИК:
 * Зайцев А. Н. ЭИО-21 ведущий инженер-программист. LMZ inc
*/
#ifndef ACTION_TREE_HPP
#define ACTION_TREE_HPP
// ---------------------------------------------------------------------------
#include <project-config.hpp>
// ---------------------------------------------------------------------------
#include <string>
#include <vector>
#include <memory>
// ---------------------------------------------------------------------------
namespace CalcPlusPlus
{
// ---------------------------------------------------------------------------
//
// Перечисление описывает тип действия
//
enum class TActionType
{
    Program,                // Программа
    Main,                   // Корневой узел синтаксического дерева
    BlockCode,              // Блок с кодом
    FunctionArguments,      // Набор аргументов функции
    Undefined,              // Неизвестный тип узла
    Empty,                  // Пустой узел, используется как заглушка
    Identifier,             // Идентификатор
    Number,                 // Узел дерева содержит число

    Plus,                   // +
    Minus,                  // -
    Multiplication,         // *
    Division,               // /
    Bigger,                 // >
    Smaller,                // <
    EqualEqual,             // ==
    NotEqual,               // !=
    LessOrEqual,            // <=
    GreatOrEqual,           // >=
    And,                    // &&
    Or,                     // ||
    Assignment,             // =
    PlusPlus,               // ++
    MinusMinus,             // --
    PlusAssignment,         // +=
    MinusAssignment,        // -=
    MultAssignment,         // *=
    DivisionAssignment,     // /=

    True,                   // true
    False,                  // False

    Variables,              // Набор переменных
    Var,                    // var
    If,                     // if
    Else,                   // else
    TrueBlock,              // If-True
    FalseBlock,             // If-False
    While,                  // while
    DoWhile,                // do_while
    For,                    // for
    Break,                  // Выход из цикла

    Options,                // Набор опций
    OptErrorValue,          // #error_value - значение переменной или выражения в случае ошибки
    OptLoopLimit,           // #loop_limit - максимальное количество итераций в цикле

    Pi,                     // Число 3.14
    ErrorValue,             // Значение ошибки
    IsErrorValue,           // Переменная содержит значение ошибки
    IfErrValueDef,          // Если возникла ошибка при вычислении, вернуть значение по умолчанию
    Ln,                     // Натуральный логарифм
    Lg,                     // Десятичный логарифм
    Sin,                    // Синус (аргумент вводится в радианах)
    Cos,                    // Косинус (аргумент вводится в радианах)
    Tan,                    // Тангенс (аргумент вводится в радианах)
    CoTan,                  // Котангенс (аргумент вводится в радианах)
    Sec,                    // Секанс (аргумент вводится в радианах)
    Csc,                    // Косеканс (аргумент вводится в радианах)
    ASin,                   // Арксинус
    ACos,                   // Арккосинус
    ATan,                   // Арктангенс (аргумент вводится в радианах)
    ACoTan,                 // Арккотангенс
    ASec,                   // Арксеканс
    ACsc,                   // Арккосеканс
    SinH,                   // Гиперболический синус
    CosH,                   // Гиперболический косинус
    TanH,                   // Гиперболический тангенс
    CoTanH,                 // Гиперболический котангенс (аргумент вводится в радианах)
    SecH,                   // Гиперболический секанс (аргумент вводится в радианах)
    CscH,                   // Гиперболический косеканс (аргумент вводится в радианах)
    ASinH,                  // Гиперболический арксинус
    ACosH,                  // Гиперболический арккосинус
    ATanH,                  // Гиперболический арктангенс
    ACoTanH,                // Гиперболический арккотангенс
    ASecH,                  // Гиперболический арксеканс
    ACscH,                  // Гиперболический арккосеканс
    Abs,                    // Абсолютное значение
    Sqrt,                   // Квадратный корень числа
    Int,                    // Выделяет целую часть числа
    Frac,                   // Выделяет дробную часть числа
    Sqr,                    // Возводит аргумент в квадрат
    Cube,                   // Возводит аргумент в кубическую степень
    Round,                  // Округляет число до ближайшего целого
    Fact,                   // Факториал
    Pow,                    // Возведение числа в степень
    Inc,                    // Увеличение числа
    Dec,                    // Уменьшение числа
    Sum,                    // Вычисляет сумму аргументов
    Max,                    // Определяет максимальное значение из аргументов
    Min,                    // Определяет минимальное значение из аргументов
    Avg,                    // Определяет среднее значение из аргументов
    Prod,                   // Вычисляет произведение аргументов
    Poly,                   // Пересчёт с учётом коэффициентов полинома

    Void_ArrayInit,         // Инициализация глобального массива (удаление всех элементов, добавление новых элементов)
    Void_ArrayInitIfEmpty,  // Инициализация глобального массива если он пустой
    ArraySize,              // Количество элементов в глобальном массиве
    Void_ArrayClear,        // Удаление всех элементов из массива
    Void_ArrayPushBack,     // Добавление элемента в конец массива
    Void_ArrayPushFront,    // Добавление элемента в начало массива
    Void_ArrayPopBack,      // Удаление элемента с конца массива
    Void_ArrayPopFront,     // Удаление элемента с начала массива
    Void_ArrayAt,           // Получение элемента массива по индексу или запись в элемент массива
    ArrayAt,                // Получение элемента массива по индексу или запись в элемент массива
    ArrayFront,             // Возвращает первый элемент массива
    ArrayBack,              // Возвращает последний элемент массива
    Void_ArrayInsert,       // Добавляет группу элементов перед элементом с определённым индексом
    Void_ArrayErase,        // Удаляет элемент из массива с определённым индексом
    Void_ArrayEraseValue,   // Удаляет все элементы с определённым значением
    Void_ArrayResize,       // Изменение размера массива
    Void_ArraySort,         // Сортировка массива
    Void_ArrayReverse,      // Переворот массива
    Void_ArrayUnique,       // Удаляет все повторяющиеся значения
    ArrayProd,              // Произведение всех элементов массива
    ArrayAvg,               // Среднее значение всех элементов массива
    ArrayMin,               // Минимальное значение из всех элементов массива
    ArrayMax,               // Максимальное значение из всех элементов массива
    ArraySum,               // Сумма всех элементов массива
    ArrayPoly,              // Пересчёт с учётом коэффициентов полинома (элементы массива являются коэффициентами полинома)

    Functions,              // Набор функций
    Function,               // Объявление функции
    InvokeFunction          // Вызов функции определённой пользователем
};
// ---------------------------------------------------------------------------
using TIncludeList = std::vector<std::pair<std::string, std::string>>;                  // Список подключаемых модулей кода
using TExternalIdList = std::vector<std::pair<std::string, std::shared_ptr<double>>>;   // Список внешних идентификаторов
// ---------------------------------------------------------------------------
//
// Структура описывает узел дерева разбора
//
struct TActionNode
{
    TActionType Type;                                   // Тип узла

    std::string Name;                                   // Имя узла, идентификатора или функции
    double Number;                                      // Данные узла типа Number
    int64_t Index;                                      // Индекс в стеке или количество вызовов функции
    std::shared_ptr<double> ExternalID;                 // Ссылка на данные внешних переменных
    std::shared_ptr<TActionNode> Invoke;                // Ссылка на функцию для узла типа InvokeFunction

    std::vector<std::shared_ptr<TActionNode>> Nodes;     // Список дочерних узлов
    //
    // Конструкторы
    //
    TActionNode(TActionType type);
    TActionNode();
    TActionNode(double number);
    TActionNode(TActionType type, const std::string& name);
    //
    // Добавление дочернего узла
    //
    void AddNode(std::shared_ptr<TActionNode> node, bool back = true);
    //
    // Добавление дочерних узлов из списка
    //
    void AddNodes(const std::vector<std::shared_ptr<TActionNode>>& nodes, bool back = true);
    //
    // Установка типа узла
    //
    void Set(TActionType type, bool reinit_name = true);
    //
    // Проверка типа узла
    //
    bool Is(TActionType type);
    //
    // Семантический анализ дерева разбора
    //
    static std::shared_ptr<TActionNode> SemanticCheck(std::shared_ptr<TActionNode> root, TExternalIdList& external_identifiers, std::string& error);
};
// ---------------------------------------------------------------------------
}
// ---------------------------------------------------------------------------
#endif